<< sort alg.
>>

var c, nr, cur, cont, store, tstore, min, max, z, len, i, past, search, neg in
  << output "Enter numbers one per line. Empty line signals end of input"; >>
  store := "";
  tstore := "";
  nr := input str;
  len := 0;

  if ( nr != "") {

    store := nr;
    len := 1;
    cur := "";
    cont := true;
    c := 0;
    neg := false;

    while ( cont ) {
      if( nr < cur + "-") {cont := false}
      else if( nr < cur + "0") { neg := true; cur := cur + "-" }
      else if( nr < cur + "1") { c := (c * 10); cur := cur + "0" }
      else if( nr < cur + "2") { c := (c * 10) + 1; cur := cur + "1" }
      else if( nr < cur + "3") { c := (c * 10) + 2; cur := cur + "2" }
      else if( nr < cur + "4") { c := (c * 10) + 3; cur := cur + "3" }
      else if( nr < cur + "5") { c := (c * 10) + 4; cur := cur + "4" }
      else if( nr < cur + "6") { c := (c * 10) + 5; cur := cur + "5" }
      else if( nr < cur + "7") { c := (c * 10) + 6; cur := cur + "6" }
      else if( nr < cur + "8") { c := (c * 10) + 7; cur := cur + "7" }
      else if( nr < cur + "9") { c := (c * 10) + 8; cur := cur + "8" }
      else { c := (c * 10) + 9; cur := cur + "9" }
    };
    if(neg)
      c := c * -1;

    min := c;
    max := c;
    nr := input str
  };

  while ( nr != "") {
    cur := "";
    cont := true;
    c := 0;
    neg := false;

    while ( cont ) {
      if( nr < cur + "-") {cont := false}
      else if( nr < cur + "0") { neg := true; cur := cur + "-" }
      else if( nr < cur + "1") { c := (c * 10); cur := cur + "0" }
      else if( nr < cur + "2") { c := (c * 10) + 1; cur := cur + "1" }
      else if( nr < cur + "3") { c := (c * 10) + 2; cur := cur + "2" }
      else if( nr < cur + "4") { c := (c * 10) + 3; cur := cur + "3" }
      else if( nr < cur + "5") { c := (c * 10) + 4; cur := cur + "4" }
      else if( nr < cur + "6") { c := (c * 10) + 5; cur := cur + "5" }
      else if( nr < cur + "7") { c := (c * 10) + 6; cur := cur + "6" }
      else if( nr < cur + "8") { c := (c * 10) + 7; cur := cur + "7" }
      else if( nr < cur + "9") { c := (c * 10) + 8; cur := cur + "8" }
      else { c := (c * 10) + 9; cur := cur + "9" }
    };
    if(neg)
      c := c * -1;

    if ( c <= min ) { min := c; if (store != "") { store := nr + " " + store } else { store := nr } }
    else 
    { 
      if (max <= c) { max := c; if (store != "") { store := store + " " + nr } else { store := nr } }
      else {
        i := 0;
        past := "";
        search := true;
        while ( i < len ) {
          i := i+1;
          cur := "";
          cont := true;
          z := 0;
          neg := false;

          while ( cont ) {
            if( store < past + cur + "-") {cont := false}
            else if( store < past + cur + "0") { neg := true; cur := cur + "-" }
            else if( store < past + cur + "1") { z:= z* 10; cur := cur + "0" }
            else if( store < past + cur + "2") { z:= (z* 10) + 1; cur := cur + "1" }
            else if( store < past + cur + "3") { z:= (z* 10) + 2; cur := cur + "2" }
            else if( store < past + cur + "4") { z:= (z* 10) + 3; cur := cur + "3" }
            else if( store < past + cur + "5") { z:= (z* 10) + 4; cur := cur + "4" }
            else if( store < past + cur + "6") { z:= (z* 10) + 5; cur := cur + "5" }
            else if( store < past + cur + "7") { z:= (z* 10) + 6; cur := cur + "6" }
            else if( store < past + cur + "8") { z:= (z* 10) + 7; cur := cur + "7" }
            else if( store < past + cur + "9") { z:= (z* 10) + 8; cur := cur + "8" }
            else { z:= (z* 10) + 9; cur := cur + "9" }
          };
         << output store;
          output tstore;
          output past;
          output c;
          output z;
          output "---"; >>
          if(neg)
            z := z * -1;
          if ( search & c <= z ) { tstore := (tstore + nr) + " "; search := false };
          tstore := tstore + cur;
          if (i < len)
            tstore := tstore + " ";

          past := (past + cur) + " " 
        };
        store := tstore;
        tstore := ""
      }
    };

    len := len + 1;
    nr := input str

  };

    output store

